#include <stdio.h>
using namespace std;

//Function for running YF outbreak model (adapted from RCPP version in mrc-ide/YFOutbreak package)
vector<double> YFOutbreak_simplified(vector<int> pop_data, int time_max_years, int n_ages, double logfoi, double logR0,
    double F_immune_initial, double vaxrate_infant, dust::rng_state_t<double>& rng_state);
//Function for reading in population data from file (currently values just input manually)
vector<int> read_pop_file();//(const char* filename);
//----------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------
class YF {
public:
  typedef double real_t;
  typedef int i_t;
  typedef dust::no_data data_t;
  //----------------------------------------------------------------------------------------------------------------------------------------
  struct internal_t {
	  i_t year;
      vector<real_t> calc_value;
  };
  //----------------------------------------------------------------------------------------------------------------------------------------
  struct shared_t {
      vector<i_t> pop_data;
      i_t time_max_years, n_ages;
	  real_t logfoi,logR0,F_immune_initial,vaxrate_infant;
  };
  //----------------------------------------------------------------------------------------------------------------------------------------
  YF(const dust::pars_t<YF>& pars) : shared(pars.shared), internal(pars.internal) {
  }
  //----------------------------------------------------------------------------------------------------------------------------------------
  size_t size() {
	  return shared->n_ages;
  }
  //----------------------------------------------------------------------------------------------------------------------------------------
  vector<real_t> initial(size_t step) {
	  vector<real_t> state(shared->n_ages, 0.0);
    return state;
  }
  //----------------------------------------------------------------------------------------------------------------------------------------
  void update(size_t step, const real_t * state,
              dust::rng_state_t<real_t>& rng_state,
              real_t * state_next) {

	  //Calculations are run for entire time period using YFOutbreak_simplified() function at first step then results simply read in 
	  //from saved data at subsequent steps
	  if (internal.year == 0)
	  {
		  internal.calc_value = YFOutbreak_simplified(shared->pop_data, shared->time_max_years, shared->n_ages, shared->logfoi, shared->logR0,
			  shared->F_immune_initial, shared->vaxrate_infant, rng_state);
	  }
      
	  i_t length = shared->n_ages;
	  i_t pos0 = internal.year * length;
      for (i_t i = 0; i < length; i++)
      {
		  state_next[i] = internal.calc_value[i + pos0];
      }    
	  internal.year++;
  }
  //----------------------------------------------------------------------------------------------------------------------------------------
private:
  dust::shared_ptr<YF> shared;
  internal_t internal;
};
//----------------------------------------------------------------------------------------------------------------------------------------
#include <cpp11/list.hpp>
// Helper function for accepting values with defaults
inline double with_default(double default_value, cpp11::sexp value) {
	return value == R_NilValue ? default_value : cpp11::as_cpp<double>(value);
}
//----------------------------------------------------------------------------------------------------------------------------------------
template <>
dust::pars_t<YF> dust_pars<YF>(cpp11::list pars) {
	typedef YF::real_t real_t;
	typedef YF::i_t i_t;

  // Default constant values
	vector<i_t> pop_data = read_pop_file();
    i_t time_max_years = 20;
    i_t n_ages = 101;
    real_t F_immune_initial = 0.0;
    real_t vaxrate_infant = 0.0;

	//Input parameters
	// [[dust::param(logfoi, required = FALSE)]]
	real_t logfoi = with_default(-10.0, pars["logfoi"]);
	// [[dust::param(logR0, required = FALSE)]]
	real_t logR0 = with_default(0.0, pars["logR0"]);

  YF::internal_t internal;
  internal.year = 0;
  internal.calc_value = { 0.0 };

  YF::shared_t shared{ pop_data,time_max_years,n_ages,logfoi,logR0,F_immune_initial,vaxrate_infant };
  return dust::pars_t<YF>(shared, internal);
}
//----------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------
vector<double> YFOutbreak_simplified(vector<int> pop_data, int time_max_years, int n_ages, double logfoi, double logR0,
    double F_immune_initial, double vaxrate_infant, dust::rng_state_t<double>& rng_state)
{
	int i, n_case, n_case_max1, n_case_max2, day, day0, day_displaced, year, age, age0, infs_i, recs_i;
	double foi, foi_spread_daily, vaxrate_total;
	int dy = 365;			// Days in a year
	int cases_max = 1000000;
	int t_incubation = 5;
	int t_latent = 5;
	int t_infectious = 5;
	double R0 = exp(logR0);
	double foi_spillover_annual = exp(logfoi);

	// Derived parameters--------------------------------------------------------------------------------------------------------------------------
	double foi_spillover_daily = foi_spillover_annual / dy;	//Daily rate of new infections due to spillover from sylvatic reservoir
	double beta = R0 / t_infectious;						//Average no. contact events/day (notional)
	double F_S0 = 1.0 - F_immune_initial;					//Initial susceptible fraction
	int n_days = (time_max_years - 1) * dy;
	int t_combined = t_latent + t_infectious;
	int binomial_cutoff = 10;								//Number of people in an age band above which infections calculated via binomial distribution

	// Vectors----------------------------------------------------------------------------------------------------------------------------------

	vector<double> P(n_ages, 0.0);				//Total number of people in each age bracket
	vector<double> dP1(n_ages, 0.0);			//Daily increase in number of people in each age bracket due to births/ageing in from previous bracket
	vector<double> dP2(n_ages, 0.0);			//Daily decrease in number of people in each age bracket due to deaths/ageing into next bracket
	vector<double> P_fraction(n_ages, 0.0);		//Fraction of total population in each age bracket
	vector<double> P_S(n_ages, 0.0);			//Susceptible population in each age bracket
	vector<double> P_V(n_ages, 0.0);			//Vaccinated population in each age bracket
	vector<double> P_R(n_ages, 0.0);			//Recovered (naturally immune) population in each age bracket
	vector<double> F_S(n_ages, 0.0);			//Susceptible fraction in each age bracket
	vector<double> F_V(n_ages, 0.0);			//Vaccinated fraction in each age bracket
	vector<double> F_R(n_ages, 0.0);			//Recovered (naturally immune) fraction in each age bracket

	vector<int> C_current(n_days, 0);			//Daily total number of cases (mild and severe) across all age brackets
	vector<double> P_current(n_days, 0.0);		//Daily total population
	vector<double> seroprev_average_annual(n_ages * (time_max_years - 1), 0.0); //Annual average seroprevalence by age


	vector<int> cases_status(cases_max, 0);
	vector<int> cases_duration(cases_max, 0);
	vector<int> cases_age(cases_max, 0);

	// Calculations-----------------------------------------------------------------------------------------------------------------------------

	for (i = 0; i < cases_max; i++)
	{
		cases_status[i] = 0;
		cases_duration[i] = 0;
		cases_age[i] = 0;
	}
	n_case_max1 = 0;
	n_case_max2 = 0;

	P_current[0] = 0;
	i = 0;
	for (age = 0; age < n_ages; age++)
	{
		P[age] = pop_data[i];
		dP1[age] = pop_data[i + 1] / dy;
		dP2[age] = pop_data[i] / dy;
		F_S[age] = age > 0 ? F_S0 : (F_S0 * 0.5);
		F_V[age] = 1.0 - F_S[age];
		P_current[0] += P[age];
		P_S[age] = P[age] * F_S[age];
		P_V[age] = P[age] * F_V[age];
		i += time_max_years;
	}
	for (age = 0; age < n_ages; age++)
	{
		P_fraction[age] = P[age] / P_current[0];
	}
	C_current[0] = 0;

	year = 0;
	for (day = 1; day < n_days; day++)
	{
		day0 = day - 1;
		day_displaced = max(0, day0 - t_incubation); //Date displaced by incubation period to account for incubation of virus in mosquitoes
		C_current[day] = C_current[day0];
		foi_spread_daily = (C_current[day_displaced] * beta) / P_current[day0];
		foi = min(1.0, foi_spillover_daily + foi_spread_daily);

		for (age = 0; age < n_ages; age++)
		{
			if (P[age] > 0.0)
			{
				infs_i = 0;

				if (P_S[age] < binomial_cutoff)
				{
					for (i = 0; i < P_S[age]; i++)
					{
						if (dust::distr::runif(rng_state, 0.0, 1.0) < foi) { infs_i++; }
					}
				}
				else
				{
					/*binomial_distribution<int> distribution(P_S[age], foi);
					infs_i = distribution(generator);*/
					infs_i = dust::distr::rbinom(rng_state, P_S[age], foi);
				}

				for (n_case = n_case_max2; n_case < n_case_max2 + infs_i; n_case++)
				{
					cases_status[n_case] = 1;
					cases_age[n_case] = age;
				}
				n_case_max2 += infs_i;

				if (age > 1)
				{
					age0 = age - 1;
					P_S[age] = max(0.0, P_S[age] + (dP1[age] * F_S[age0]) - infs_i - (dP2[age] * F_S[age]));
					P_V[age] = max(0.0, P_V[age] + (dP1[age] * F_V[age0]) - (dP2[age] * F_V[age]));
					P_R[age] = max(0.0, P_R[age] + (dP1[age] * F_R[age0]) - (dP2[age] * F_R[age]));
				}
				else
				{
					vaxrate_total = vaxrate_infant * P_S[age]; //TODO - May need to change
					P_S[age] = max(0.0, P_S[age] + dP1[age] - infs_i - vaxrate_total - (dP2[age] * F_S[age]));
					P_V[age] = max(0.0, P_V[age] + vaxrate_total - (dP2[age] * F_V[age]));
					P_R[age] = max(0.0, P_R[age] - (dP2[age] * F_R[age]));
				}
				P[age] = max(0.0, P[age] + dP1[age] - dP2[age]);

				if (P[age] > 0.0)
				{
					F_S[age] = P_S[age] / P[age];
					F_V[age] = P_V[age] / P[age];
					F_R[age] = P_R[age] / P[age];
				}
				else
				{
					F_S[age] = 1.0;
					F_V[age] = 0.0;
					F_R[age] = 0.0;
				}
			}

		}

		recs_i = 0;
		for (n_case = n_case_max1; n_case < n_case_max2; n_case++)
		{
			if (cases_duration[n_case] == t_latent)
			{
				C_current[day]++;
				cases_status[n_case] = 2;
			}
			else
			{
				if (cases_duration[n_case] == t_combined)
				{
					recs_i++;
					P_R[cases_age[n_case]] += 1.0;
					C_current[day]--;
					cases_status[n_case] = 0;
				}

			}
			cases_duration[n_case]++;
		}
		n_case_max1 += recs_i;

		P_current[day] = 0.0;
		for (age = 0; age < n_ages; age++) { P_current[day] += P[age]; }
		for (age = 0; age < n_ages; age++)
		{
			P_fraction[age] = P[age] / P_current[day];
			//seroprev_average_annual[(year * n_ages) + age] += min(1.0, F_V[age] + F_R[age]) / dy;
			seroprev_average_annual[(year * n_ages) + age] += min(1.0, F_R[age] / (1.0 - F_V[age])) / dy;
		}

		if (day % dy == 0)
		{
			year++;
			i = year;
			for (age = 0; age < n_ages; age++)
			{
				dP1[age] = pop_data[i + 1] / dy;
				dP2[age] = pop_data[i] / dy;
				i += time_max_years;
			}
		}
	}

	return seroprev_average_annual;
}
//---------------------------------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------------------------------

vector<int> read_pop_file()//(const char* filename)
{
	int i;
	//int v;
	//FILE* sourcefile;
	//sourcefile = fopen(filename, "r");
	int values[] = { 11310,11708,12133,12583,13070,13630,14149,14637,15114,15601,16134,16594,17012,17417,17835,18247,18672,19114,19571,20034,9716,10058,10423,10810,11228,11710,12155,12574,12984,13403,13860,14255,14615,14962,15322,15675,16041,16421,16813,17211,9227,9551,9898,10265,10662,11119,11542,11940,12329,12727,13161,13537,13878,14208,14549,14885,15232,15593,15965,16343,8761,9069,9399,9747,10125,10559,10960,11338,11708,12085,12498,12854,13178,13491,13816,14134,14464,14807,15160,15519,8307,8596,8900,9210,9532,9919,10311,10707,11105,11501,11940,12366,12782,13184,13572,13968,14347,14709,15060,15407,7920,8195,8482,8770,9062,9422,9801,10193,10590,10982,11418,11859,12297,12719,13120,13534,13920,14279,14619,14954,7534,7794,8063,8329,8593,8926,9290,9678,10075,10462,10897,11351,11811,12254,12668,13099,13493,13849,14179,14500,7291,7539,7797,8055,8311,8621,8960,9321,9694,10065,10477,10912,11358,11793,12207,12637,13039,13413,13765,14105,7048,7283,7531,7781,8029,8316,8629,8964,9313,9667,10057,10473,10905,11332,11746,12175,12586,12977,13351,13710,6806,7028,7264,7506,7747,8010,8299,8607,8932,9269,9638,10035,10451,10872,11286,11713,12133,12541,12937,13315,6563,6773,6998,7232,7465,7705,7968,8250,8551,8872,9218,9596,9998,10411,10825,11251,11680,12105,12523,12921,6321,6518,6732,6958,7183,7400,7638,7892,8170,8474,8798,9157,9545,9950,10364,10789,11226,11669,12109,12526,6109,6303,6516,6739,6962,7173,7403,7647,7912,8200,8504,8838,9200,9580,9973,10378,10797,11226,11657,12072,5897,6089,6300,6521,6741,6947,7168,7402,7654,7927,8209,8519,8855,9210,9581,9966,10367,10783,11204,11618,5685,5875,6084,6303,6520,6720,6933,7156,7396,7653,7914,8200,8510,8841,9190,9555,9938,10339,10751,11165,5473,5661,5868,6085,6299,6493,6698,6911,7138,7379,7620,7881,8165,8471,8799,9143,9508,9896,10299,10711,5262,5447,5652,5866,6078,6266,6463,6665,6879,7105,7325,7562,7820,8101,8408,8732,9079,9452,9846,10257,5094,5269,5462,5664,5866,6051,6245,6446,6658,6880,7095,7325,7572,7840,8129,8434,8758,9105,9474,9862,4927,5091,5271,5461,5655,5835,6027,6228,6437,6655,6864,7087,7325,7579,7851,8135,8436,8758,9102,9467,4760,4914,5081,5259,5444,5620,5810,6009,6216,6430,6634,6849,7077,7318,7572,7837,8115,8410,8729,9073,4592,4736,4891,5056,5233,5405,5592,5790,5995,6205,6404,6611,6829,7057,7294,7539,7794,8063,8357,8678,4425,4558,4700,4854,5021,5189,5374,5571,5774,5979,6173,6373,6581,6796,7015,7241,7473,7716,7985,8283,4254,4391,4536,4691,4857,5019,5194,5379,5571,5767,5957,6154,6361,6573,6789,7009,7233,7467,7723,8005,4083,4224,4373,4529,4693,4849,5014,5187,5368,5556,5740,5935,6141,6351,6563,6777,6993,7218,7462,7726,3911,4056,4209,4367,4528,4679,4834,4995,5164,5344,5524,5717,5921,6129,6336,6545,6754,6969,7200,7448,3740,3889,4045,4205,4364,4509,4654,4803,4961,5132,5307,5498,5702,5906,6110,6313,6514,6720,6938,7169,3569,3722,3881,4043,4199,4338,4474,4610,4758,4920,5091,5279,5482,5684,5884,6081,6275,6471,6677,6891,3422,3567,3719,3876,4029,4169,4308,4448,4597,4757,4922,5100,5291,5482,5674,5865,6057,6253,6457,6667,3276,3412,3557,3709,3859,3999,4141,4285,4436,4595,4753,4921,5100,5280,5464,5650,5840,6035,6237,6443,3129,3257,3395,3541,3689,3830,3974,4122,4275,4432,4584,4742,4909,5078,5253,5435,5623,5817,6017,6219,2983,3101,3233,3374,3519,3660,3808,3960,4114,4269,4415,4564,4717,4876,5043,5219,5406,5598,5797,5995,2836,2946,3071,3207,3349,3490,3641,3797,3953,4107,4246,4385,4526,4674,4833,5004,5189,5380,5577,5771,2737,2839,2953,3079,3212,3345,3487,3637,3788,3938,4078,4219,4364,4514,4671,4836,5011,5190,5377,5563,2637,2731,2836,2951,3075,3200,3334,3476,3622,3770,3910,4054,4202,4355,4509,4668,4833,5001,5177,5355,2538,2623,2718,2823,2939,3055,3181,3316,3457,3601,3742,3888,4040,4195,4347,4500,4654,4811,4976,5148,2438,2516,2601,2695,2802,2909,3027,3156,3291,3433,3574,3722,3878,4035,4185,4333,4476,4621,4776,4940,2338,2408,2483,2567,2666,2764,2874,2995,3126,3265,3406,3557,3716,3875,4023,4165,4298,4431,4576,4732,2256,2323,2398,2479,2572,2664,2766,2878,2998,3129,3262,3405,3556,3710,3856,3997,4133,4270,4416,4570,2173,2239,2312,2391,2479,2565,2659,2760,2871,2993,3117,3252,3397,3544,3688,3829,3968,4109,4256,4408,2090,2154,2226,2303,2386,2465,2551,2643,2744,2857,2972,3100,3237,3379,3521,3661,3803,3948,4096,4246,2007,2070,2141,2215,2293,2366,2443,2525,2616,2721,2828,2948,3077,3213,3354,3493,3638,3787,3937,4084,1925,1985,2055,2127,2200,2266,2336,2408,2489,2584,2683,2796,2917,3048,3186,3325,3473,3626,3777,3922,1869,1926,1988,2053,2120,2183,2251,2322,2401,2491,2583,2688,2800,2921,3050,3181,3321,3467,3612,3754,1813,1866,1921,1979,2041,2101,2165,2235,2313,2398,2484,2579,2682,2794,2914,3037,3169,3307,3447,3587,1758,1807,1853,1905,1962,2018,2080,2149,2225,2305,2384,2471,2565,2667,2778,2893,3016,3147,3282,3420,1702,1747,1786,1831,1882,1935,1995,2063,2137,2212,2285,2363,2447,2540,2642,2749,2864,2987,3117,3252,1647,1687,1719,1757,1803,1852,1910,1977,2049,2119,2185,2255,2330,2414,2506,2605,2712,2828,2952,3085,1537,1589,1638,1689,1743,1794,1849,1908,1973,2038,2101,2169,2243,2324,2412,2503,2602,2710,2825,2949,1427,1492,1557,1621,1684,1736,1787,1840,1897,1958,2017,2083,2156,2234,2318,2402,2493,2591,2697,2813,1317,1394,1476,1554,1624,1679,1726,1772,1822,1877,1933,1998,2069,2145,2223,2301,2384,2473,2570,2677,1207,1296,1395,1486,1565,1621,1665,1704,1746,1797,1849,1912,1983,2055,2129,2200,2274,2355,2443,2541,1097,1198,1314,1418,1505,1563,1603,1635,1670,1716,1765,1826,1896,1965,2035,2098,2165,2237,2315,2405,1047,1129,1224,1313,1394,1455,1507,1554,1602,1654,1705,1763,1824,1888,1952,2013,2077,2148,2223,2308,996,1059,1135,1209,1284,1348,1410,1472,1533,1592,1645,1699,1753,1810,1870,1927,1990,2059,2131,2212,946,990,1045,1104,1173,1240,1313,1390,1465,1530,1585,1635,1682,1732,1788,1841,1903,1970,2039,2115,895,920,955,999,1063,1132,1217,1309,1397,1468,1525,1572,1611,1655,1706,1756,1815,1881,1947,2018,845,851,865,894,952,1025,1120,1227,1328,1407,1464,1508,1540,1577,1624,1670,1728,1791,1855,1922,814,822,837,864,913,972,1050,1138,1225,1298,1359,1411,1457,1506,1558,1606,1660,1717,1775,1837,784,793,809,833,873,920,980,1049,1122,1190,1253,1315,1374,1435,1493,1541,1591,1642,1694,1752,753,764,780,802,834,868,910,960,1019,1082,1147,1218,1291,1364,1427,1477,1523,1567,1614,1666,722,735,752,772,795,816,840,871,916,974,1041,1121,1209,1293,1362,1413,1455,1493,1533,1581,692,706,724,741,755,764,770,781,813,865,935,1025,1126,1221,1297,1349,1386,1418,1453,1496,658,671,688,706,720,729,737,750,778,823,880,953,1037,1119,1190,1244,1290,1334,1378,1426,623,637,653,670,685,695,704,718,743,781,826,882,949,1018,1082,1139,1194,1249,1302,1355,589,602,618,635,649,660,671,686,707,739,772,811,860,916,975,1034,1098,1165,1227,1284,555,567,582,600,614,625,638,654,672,696,717,740,772,814,868,930,1002,1080,1152,1214,521,533,547,564,579,590,605,622,637,654,663,669,683,712,761,825,906,996,1077,1143,487,498,512,528,542,554,568,584,599,615,625,632,647,673,715,768,834,908,978,1040,454,464,478,493,506,517,531,546,560,577,586,596,611,634,670,711,762,820,879,936,420,430,443,457,469,481,494,508,522,538,548,559,575,596,624,655,691,732,780,832,387,396,408,421,433,445,457,469,484,499,510,523,539,557,578,598,619,644,681,729,353,362,373,385,397,408,420,431,446,460,472,486,504,518,533,541,547,556,582,625,322,331,342,353,364,375,386,397,410,423,435,449,465,479,493,501,508,517,541,578,292,300,310,320,331,341,351,362,374,386,398,411,426,439,453,461,469,479,500,530,261,270,278,288,298,307,317,327,338,349,361,373,387,400,413,421,431,441,458,483,230,239,246,255,265,274,283,292,302,312,324,336,348,361,373,381,392,403,417,435,200,208,214,223,232,240,249,258,266,275,287,298,310,321,333,342,353,365,376,388,177,185,190,198,205,214,222,230,238,246,257,267,278,288,299,308,318,329,340,350,155,162,167,173,179,188,196,203,211,217,227,237,247,255,265,274,284,294,303,313,132,139,143,148,153,162,169,176,183,188,198,206,216,222,230,241,249,259,267,275,109,116,119,123,127,136,142,149,155,159,168,175,185,189,196,207,214,223,230,237,87,93,96,98,101,110,116,122,127,130,139,145,153,156,162,174,179,188,194,200,75,80,83,85,87,95,100,105,111,113,120,126,134,136,141,152,157,164,170,174,63,67,70,72,74,80,85,89,94,96,102,108,114,116,120,130,134,141,145,149,50,54,57,58,60,65,69,73,77,78,83,89,94,96,100,108,112,117,121,123,38,42,45,45,46,50,53,57,60,61,65,71,75,75,79,86,89,93,97,98,26,29,32,32,32,35,38,41,43,43,46,52,55,55,58,64,67,69,72,72,22,24,27,27,27,30,32,34,36,36,39,44,46,47,49,54,57,59,61,61,18,20,21,21,21,24,26,28,30,30,32,36,38,39,39,44,47,49,50,50,14,15,16,16,16,19,20,21,23,23,25,28,29,31,30,34,37,38,39,39,10,10,11,11,11,14,14,15,16,16,19,20,20,23,21,24,27,28,28,28,6,6,6,6,6,9,9,9,9,9,12,12,12,14,12,14,17,17,17,17,5,5,5,5,5,7,7,7,7,7,9,10,10,12,10,12,14,14,14,14,3,3,3,3,3,5,5,5,5,5,7,8,8,10,8,10,12,12,12,12,2,2,2,2,2,3,3,3,3,3,5,6,6,8,6,8,9,9,9,9,1,1,1,1,1,2,2,2,2,2,2,5,5,5,5,5,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1 };
	vector<int> pop_data_vector(values, values + sizeof(values) / sizeof(int));
	//vector<int> pop_data_vector(0, 2020);

	//rewind(sourcefile);
	for (i = 0; i < 2020; i++)
	{
		//fscanf(sourcefile, "%d", &v);
		//pop_data_vector[i] = v;
		pop_data_vector[i] = values[i];
	}

	return pop_data_vector;
}
